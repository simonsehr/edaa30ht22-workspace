D7/

1. Skulle du lika gärna kunna använda ArrayList för att lagra elementen i FifoQueue
i uppgift D1?

    - Ja

2.Jämför de två olika sätten att implementera FifoQueue (uppgift D1 resp. uppgift D3).
Fördelar/nackdelar?

        -   Advantages
        1.  If we are at a node, then we can go to any node. But in linear linked list it is not 
            possible to go to previous node.

        2.  It saves time when we have to go to the first node from the last node. It can be done 
            in single step because there is no need to traverse the in between nodes. But in double
            linked list, we will have to go through in between nodes.

        3.  It concerns the deletion operation. In singly linked list to delete desired node, it 
            is necessary to give the address of first node of the list.

        4.  Every operation takes constant time O(1)  

            Disadvantages:

            1. It is not easy to reverse the linked list.

            2. If proper care is not taken, then the problem of infinite loop can occur.

            3. If we at a node and go back to the previous node, then we can not do it in single step. 
            Instead we have to complete the entire circle by going through the in between nodes and then we will reach the required node.

3. Istället för att implementera en egen kö-klass skulle man helt enkelt kunna använda
någon av kö-klasserna i java.util (LinkedList eller ArrayDeque). Ofta är det klokt
att återanvända en befintlig implementering på detta sätt. I vilka situationer kan det
vara olämpligt?

    - När man har specifika krav för kön om hur den ska fungera?


4. Vid testning av dina klass FifoQueue får du grönt ljus. Kan du då vara säker på att
din klass är felfri?

    - Nej. Beror ju helt på hur bra gjorda testerna är. 


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bra att veta:::
    -   Linked list can grow and shrink in size dynamically without wasting any memory. Hence, we prefer a linked list for 
        quick insertion and deletion, unlike an Array List. A linked list is memory efficient but takes some extra memory for 
        pointers that points to the next node.

    -   constant time O(1) == tiden för exekvering är alltid samma oavsett hur mycket input datan är. (antal steg som måste köras är alltid samma)

    -   constant time O(n) == tiden för exekvering är proportionell till hur mycket data som körs. (Mer data --> längre tid)